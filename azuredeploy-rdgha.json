{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "existingVNETName": {
      "type": "string",
      "metadata": {
        "description": "Existing VNET that contains the domain controller"
      }
    },
    "existingSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing subnet that contains the domain controller"
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "maxlength": 5,
      "metadata": {
        "description": "Unique prefix for the deployment. This will be the bases for all named resources, and the public DNS  will be $prefix-rdgha.$location.cloudapp.azure.com"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "The size of the virtual machines"
      }
    },
    "domainToJoin": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the AD domain"
      }
    },
    "domainUsername": {
      "type": "string",
      "metadata": {
        "description": "Username of the account on the domain"
      }
    },
    "domainPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password of the account on the domain"
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation marks. Example: \"OU=testOU; DC=domain; DC=Domain; DC=com\""
      }
    },
    "domainJoinOptions": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The name of the administrator of the new VM and the domain. Exclusion list: 'admin','administrator"
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the administrator account of the new VM and the domain"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "diagStorage": {
      "type": "string",
      "defaultValue": "[concat(uniquestring(resourceGroup().id, deployment().name))]",
      "metadata": {
        "description": "Storage account for VM diagnostics."
      }
    },
    "scriptUri": {
      "type": "string",
      "metadata": {
        "description": "URI path to custom script."
      }
    },
    "scriptName": {
      "type": "string",
      "metadata": {
        "description": "Name of custom script to pass for execution."
      }
    }    
  },
  "variables": {
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "windowsOSVersion": "2016-Datacenter",
    "dnsLabelPrefix1": "[concat(toLower(parameters('deploymentPrefix')),'-rdgha-vm1')]",
    "dnsLabelPrefix2": "[concat(toLower(parameters('deploymentPrefix')),'-rdgha-vm2')]",
    "nicName1": "[concat(variables('dnsLabelPrefix1'),'-nic')]",
    "nicName2": "[concat(variables('dnsLabelPrefix2'),'-nic')]",
    "availabilitySetName": "[concat(parameters('deploymentPrefix'),'-RDGHA-AvlSet')]",
    "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
    "loadBalancerName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB')]",
    "loadBalancerPipName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB-PIP')]",
    "loadBalancerDnsPrefix": "[concat(toLower(parameters('deploymentPrefix')),'-rdgha')]",
    "loadBalancerFeName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB-FI')]",
    "loadBalancerBapName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB-BAP')]",
    "loadBalancerHpName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB-RDGServiceProbe')]",
    "loadBalancerRuleHttpsName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB-RuleHttps')]",
    "loadBalancerRuleUdpName": "[concat(parameters('deploymentPrefix'),'-RDGHA-LB-RuleUdp')]",
    "loadBalancerPipId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('loadBalancerPipName'))]",
    "loadBalancerId": "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
    "loadBalancerFeId": "[concat(variables('loadBalancerId'), '/frontendIPConfigurations/', variables('loadBalancerFeName'))]",
    "loadBalancerBapId": "[concat(variables('loadBalancerId'), '/backendAddressPools/', variables('loadBalancerBapName'))]",
    "loadBalancerHpId": "[concat(variables('loadBalancerId'), '/probes/', variables('loadBalancerHpName'))]",
    "subnetId": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVNETName'), parameters('existingSubnetName'))]"
  },
  "resources": [
      {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2,
        "managed": true
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('diagStorage')]",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('loadBalancerPipName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Static",        
        "dnsSettings": {
          "domainNameLabel": "[variables('loadBalancerDnsPrefix')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('loadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('loadBalancerPipName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('loadBalancerFeName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('loadBalancerPipId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('loadBalancerBapName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('loadBalancerRuleHttpsName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('loadBalancerFeId')]"
              },
              "backendAddressPool": {
                "id": "[variables('loadBalancerBapId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 15,
              "probe": {
                "id": "[variables('loadBalancerHpId')]"
              }
            }
          },
          {
            "name": "[variables('loadBalancerRuleUdpName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('loadBalancerFeId')]"
              },
              "backendAddressPool": {
                "id": "[variables('loadBalancerBapId')]"
              },
              "protocol": "Udp",
              "frontendPort": 3391,
              "backendPort": 3391,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 15,
              "probe": {
                "id": "[variables('loadBalancerHpId')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('loadBalancerHpName')]",
            "properties": {
              "protocol": "Http",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "requestPath": "/healthcheck.htm"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName1')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetId')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('loadBalancerId'), '/backendAddressPools/',variables('loadBalancerBapName'))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName2')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetId')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('loadBalancerId'), '/backendAddressPools/',variables('loadBalancerBapName'))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('dnsLabelPrefix1')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagStorage'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName1'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('dnsLabelPrefix1')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('dnsLabelPrefix1'),'_OsDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName1'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', parameters('diagStorage')), '2015-06-15').primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('dnsLabelPrefix1'),'/joindomain')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix1'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('domainToJoin')]",
          "OUPath": "[parameters('ouPath')]",
          "User": "[concat(parameters('domainToJoin'), '\\', parameters('domainUsername'))]",
          "Restart": "true",
          "Options": "[parameters('domainJoinOptions')]"
        },
        "protectedSettings": {
          "Password": "[parameters('domainPassword')]"
        }
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('dnsLabelPrefix2')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagStorage'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName2'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('dnsLabelPrefix2')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('dnsLabelPrefix2'),'_OsDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName2'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', parameters('diagStorage')), '2015-06-15').primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('dnsLabelPrefix2'),'/joindomain')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabelPrefix2'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('domainToJoin')]",
          "OUPath": "[parameters('ouPath')]",
          "User": "[concat(parameters('domainToJoin'), '\\', parameters('domainUsername'))]",
          "Restart": "true",
          "Options": "[parameters('domainJoinOptions')]"
        },
        "protectedSettings": {
          "Password": "[parameters('domainPassword')]"
        }
      }
    },
    {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('dnsLabelPrefix1'),'/',parameters('scriptName'))]",
        "apiVersion": "2015-06-15",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('dnsLabelPrefix1'),'joindomain')]"
        ],
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.7",
          "autoUpgradeMinorVersion":true,
          "settings": {
              "fileUris": [ "[parameters('scriptUri')]" ]             
           },
          "protectedSettings": {
            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -file ', parameters('scriptName'))]"
          }
        }
    },    
    {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('dnsLabelPrefix2'),'/',parameters('scriptName'))]",
        "apiVersion": "2015-06-15",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('dnsLabelPrefix2'),'joindomain')]"
        ],
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.7",
          "autoUpgradeMinorVersion":true,
          "settings": {
              "fileUris": [ "[parameters('scriptUri')]" ]             
          },
          "protectedSettings": {
            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -file ', parameters('scriptName'))]"
          }
        }
    }    
  ]
}
